openapi: 3.0.3
info:
  title: FlashDash API
  description: |
    FlashDash is an interactive learning application that enhances knowledge retention 
    through quizzes combined with gamification elements. It offers a fun and engaging way 
    to learn various topics by using dynamic quizzes, personalized decks, and competitive 
    game sessions.
  version: 1.0.1
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Auth
    description: Authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Decks
    description: Deck management endpoints
  - name: Questions
    description: Question management endpoints
  - name: Game Sessions
    description: Game session management endpoints
  - name: Friends
    description: Friend management endpoints
  - name: Friend Invitations
    description: Friend invitation management endpoints

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: |
        Allows a new user to create an account.
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: Successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
              examples:
                Authentication Response:
                  $ref: "#/components/examples/AuthenticationResponseExample"
        "409":
          description: Conflict - Email Already Registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Email Already Registered:
                  $ref: "#/components/examples/ErrorResponseExample409_EmailAlreadyRegistered"

  /auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate a user
      description: |
        Authenticates a user and returns an authentication token.
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              Login Request:
                $ref: "#/components/examples/LoginRequestExample"
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
              examples:
                Authentication Response:
                  $ref: "#/components/examples/AuthenticationResponseExample"
        "401":
          description: Unauthorized - Invalid Password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Invalid Password:
                  $ref: "#/components/examples/ErrorResponseExample401_InvalidPassword"
        "403":
          description: Forbidden - Account Not Activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Account Not Activated:
                  $ref: "#/components/examples/ErrorResponseExample403_AccountNotActivated"
        "404":
          description: Not Found - User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                User Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_UserNotFound"

  /auth/activate:
    get:
      tags:
        - Auth
      summary: Activate a user account
      description: |
        Activates a user account using the provided token received via email.
      operationId: activateAccount
      security: []
      parameters:
        - name: token
          in: query
          required: true
          description: Activation token received via email
          schema:
            type: string
      responses:
        "200":
          description: Successfully activated
        "400":
          description: Bad Request - Account Already Activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Account Already Activated:
                  $ref: "#/components/examples/ErrorResponseExample400_AccountAlreadyActivated"
        "404":
          description: Not Found - User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                User Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_UserNotFound"
  /users:
    get:
      tags:
        - Users
      summary: Get details of the authenticated user
      description: |
        Retrieves details of the authenticated user.
      security:
        - bearerAuth: []
      operationId: getUser
      responses:
        "200":
          description: Successfully retrieved user details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
              examples:
                User response:
                  $ref: "#/components/examples/UserResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

    delete:
      tags:
        - Users
      summary: Delete the authenticated user's account
      description: |
        Deletes the authenticated user's account.
      security:
        - bearerAuth: []
      operationId: deleteUser
      responses:
        "204":
          description: Successfully deleted the user account
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

    put:
      tags:
        - Users
      summary: Change the password of the authenticated user
      description: |
        Changes the authenticated user's password.
      security:
        - bearerAuth: []
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: "Current password of the user."
                newPassword:
                  type: string
                  description: "New password for the user."
      responses:
        "200":
          description: Password changed successfully
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /users/notifications/enable:
    put:
      tags:
        - Users
      summary: Enable notifications for the authenticated user
      description: |
        Enables daily notifications for the authenticated user.
      security:
        - bearerAuth: [ ]
      operationId: enableNotifications
      responses:
        "200":
          description: Notifications enabled successfully
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /users/notifications:
    get:
      tags:
        - Users
      summary: Retrieve notifications details for the authenticated user
      description: |
        Returns notifications details for the authenticated user.
      security:
        - bearerAuth: [ ]
      operationId: getNotificationsDetails
      parameters:
        - name: notificationTime
          in: query
          required: false
          schema:
            type: string
            format: time
          description: "Optional time for daily notifications (HH:mm format). If not provided, the default time will be used."
      responses:
        "200":
          description: Notifications disabled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSubscriber"
              examples:
                Subscriber response:
                  $ref: "#/components/examples/SubscriberResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /users/notifications/disable:
    put:
      tags:
        - Users
      summary: Disable notifications for the authenticated user
      description: |
        Disables daily notifications for the authenticated user.
      security:
        - bearerAuth: [ ]
      operationId: disableNotifications
      responses:
        "200":
          description: Notifications disabled successfully
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /decks:
    post:
      tags:
        - Decks
      summary: Create a new deck
      description: |
        Creates a new deck for the authenticated user.
      security:
        - bearerAuth: []
      operationId: createDeck
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeckRequest"
            examples:
              Deck Request:
                $ref: "#/components/examples/DeckRequestExample"
      responses:
        "200":
          description: Successfully created a deck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckResponse"
              examples:
                Deck Response:
                  $ref: "#/components/examples/DeckResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

    get:
      tags:
        - Decks
      summary: Get all decks for the authenticated user
      description: |
        Retrieves all decks owned by the authenticated user.
      security:
        - bearerAuth: []
      operationId: getAllDecks
      responses:
        "200":
          description: List of decks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeckResponse"
              examples:
                Deck List Response:
                  $ref: "#/components/examples/DeckListResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /decks/{deckId}:
    get:
      tags:
        - Decks
      summary: Get a specific deck by ID
      description: |
        Retrieves details of a specific deck.
      security:
        - bearerAuth: []
      operationId: getDeckById
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Retrieved deck details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckResponse"
              examples:
                Deck Response:
                  $ref: "#/components/examples/DeckResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Deck Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"

    put:
      tags:
        - Decks
      summary: Update a deck
      description: |
        Updates an existing deck.
      security:
        - bearerAuth: []
      operationId: updateDeck
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeckRequest"
            examples:
              Deck Request:
                $ref: "#/components/examples/DeckRequestExample"
      responses:
        "200":
          description: Successfully updated the deck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckResponse"
              examples:
                Deck Response:
                  $ref: "#/components/examples/DeckResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Deck Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"

    delete:
      tags:
        - Decks
      summary: Delete a deck
      description: |
        Deletes a deck.
      security:
        - bearerAuth: []
      operationId: deleteDeck
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successfully deleted the deck
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Deck Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"

  /decks/{deckId}/questions:
    post:
      tags:
        - Questions
      summary: Add a question to a deck
      description: |
        Adds a new question to the specified deck.
        The request body should include the question details.
      security:
        - bearerAuth: []
      operationId: addQuestion
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionRequest"
            examples:
              Question Request:
                $ref: "#/components/examples/QuestionRequestExample"
      responses:
        "200":
          description: Question added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionResponse"
              examples:
                Question Response:
                  $ref: "#/components/examples/QuestionResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Deck Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"

    get:
      tags:
        - Questions
      summary: Get all questions in a deck
      description: |
        Retrieves all questions in the specified deck.
        Requires authentication.
      security:
        - bearerAuth: []
      operationId: getAllQuestions
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionResponse"
              examples:
                Question List Response:
                  $ref: "#/components/examples/QuestionListResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Deck Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"

  /decks/{deckId}/questions/{questionId}:
    get:
      tags:
        - Questions
      summary: Get a specific question by ID within a deck
      description: |
        Retrieves a specific question from the specified deck.
      security:
        - bearerAuth: []
      operationId: getQuestionById
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Retrieved question details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionResponse"
              examples:
                Question Response:
                  $ref: "#/components/examples/QuestionResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Question Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"
                Question Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_QuestionNotFound"

    put:
      tags:
        - Questions
      summary: Update a question in a deck
      description: |
        Updates an existing question within the specified deck.
        The request body should contain updated question details.
      security:
        - bearerAuth: []
      operationId: updateQuestion
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionRequest"
            examples:
              Question Request:
                $ref: "#/components/examples/QuestionRequestExample"
      responses:
        "200":
          description: Successfully updated the question
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionResponse"
              examples:
                Question Response:
                  $ref: "#/components/examples/QuestionResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Question Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"
                Question Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_QuestionNotFound"

    delete:
      tags:
        - Questions
      summary: Delete a question from a deck
      description: |
        Removes a question from the specified deck.
      security:
        - bearerAuth: []
      operationId: deleteQuestion
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successfully deleted the question
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Question Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"
                Question Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_QuestionNotFound"

  /decks/{deckId}/gameSessions/start:
    post:
      tags:
        - Game Sessions
      summary: Start a game session for a specific deck
      description: |
        Starts a new game session using the specified deck.
        The session will return a set of questions from the deck.
      security:
        - bearerAuth: []
      operationId: startGameSession
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Game session started, returning questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionResponse"
              examples:
                Question List Response:
                  $ref: "#/components/examples/QuestionListResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Deck Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"

  /decks/{deckId}/gameSessions/end:
    post:
      tags:
        - Game Sessions
      summary: End a game session and submit answers
      description: |
        Ends an active game session for the specified deck.
        The request body should include the user's answers to the session questions.
      security:
        - bearerAuth: []
      operationId: endGameSession
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/GameSessionResponse"
            examples:
              Question List Request:
                $ref: "#/components/examples/GameSessionResponseExample"
      responses:
        "200":
          description: Game session ended, returning results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameSessionResponse"
              examples:
                Game Session Result:
                  $ref: "#/components/examples/GameSessionResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Deck Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"

  /decks/{deckId}/gameSessions:
    get:
      tags:
        - Game Sessions
      summary: Get all game sessions for a specific deck
      description: |
        Retrieves all game sessions that have been played using the specified deck.
      security:
        - bearerAuth: []
      operationId: getAllGameSessions
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of game sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GameSessionResponse"
              examples:
                Game Session Result List:
                  $ref: "#/components/examples/GameSessionResponseListExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Deck Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"

  /decks/{deckId}/gameSessions/{gameSessionId}:
    get:
      tags:
        - Game Sessions
      summary: Get details of a specific game session
      description: |
        Retrieves details of a specific game session for the specified deck.
      security:
        - bearerAuth: []
      operationId: getGameSessionById
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: gameSessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Game session details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameSessionResponse"
              examples:
                Game Session Result:
                  $ref: "#/components/examples/GameSessionResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Deck Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Deck Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_DeckNotFound"

  /friends:
    get:
      tags:
        - Friends
      summary: Get the list of friends
      description: |
        Retrieves the list of friends for the authenticated user.
        Requires a valid authentication token.
      security:
        - bearerAuth: []
      operationId: getFriends
      responses:
        "200":
          description: List of friends
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
              examples:
                Friend List Response:
                  $ref: "#/components/examples/UserListResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /friends/{friendId}:
    get:
      tags:
        - Friends
      summary: Get the friend details
      description: |
        Retrieves detailed information about a specific friend identified by `friendId`.
      security:
        - bearerAuth: []
      operationId: getFriend
      parameters:
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Friend details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
              examples:
                Friend Response:
                  $ref: "#/components/examples/UserResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Friend Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Friend Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_FriendNotFound"

    delete:
      tags:
        - Friends
      summary: Remove a friend
      description: |
        Removes a friend from the authenticated user's friend list.
      security:
        - bearerAuth: []
      operationId: deleteFriend
      parameters:
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Successfully removed friend
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Friend Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Friend Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_FriendNotFound"

  /invitations:
    post:
      tags:
        - Friend Invitations
      summary: Send a friend invitation
      description: |
        Sends a friend invitation to a user using their email address.
        The recipient’s email should be provided as a query parameter `recipientEmail`.
        Requires authentication.
      security:
        - bearerAuth: []
      operationId: sendFriendInvitation
      parameters:
        - name: recipientEmail
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Invitation sent
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /invitations/received:
    get:
      tags:
        - Friend Invitations
      summary: Get received friend invitations
      description: |
        Retrieves a list of friend invitations received by the authenticated user.
        Each invitation includes details about the sender and creation time.
      security:
        - bearerAuth: []
      operationId: getReceivedInvitations
      responses:
        "200":
          description: List of received invitations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FriendInvitationResponseReceived"
              examples:
                Friend Invitation Received:
                  $ref: "#/components/examples/FriendInvitationResponseReceivedExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /invitations/sent:
    get:
      tags:
        - Friend Invitations
      summary: Get sent friend invitations
      description: |
        Retrieves a list of friend invitations sent by the authenticated user.
        Each invitation includes details about the recipient and creation time.
      security:
        - bearerAuth: []
      operationId: getSentInvitations
      responses:
        "200":
          description: List of sent invitations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FriendInvitationResponseSent"
              examples:
                Friend Invitation Sent:
                  $ref: "#/components/examples/FriendInvitationResponseSentExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /invitations/{invitationId}:
    put:
      tags:
        - Friend Invitations
      summary: Respond to a friend invitation
      description: |
        Responds to a received friend invitation by updating its status.
        The new status should be provided as a query parameter.
      security:
        - bearerAuth: []
      operationId: respondToInvitation
      parameters:
        - name: invitationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: [PENDING, ACCEPTED, REJECTED]
      responses:
        "200":
          description: Successfully responded to invitation
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Not Found - Friend Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Friend Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_InvitationNotFound"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Authentication scheme using Bearer token with JWT."

  schemas:
    LoginRequest:
      type: object
      description: "Request payload for user login."
      properties:
        email:
          type: string
          format: email
          description: "User's email address."
        password:
          type: string
          format: password
          description: "User's password."

    RegisterRequest:
      type: object
      description: "Request payload for user registration."
      properties:
        email:
          type: string
          format: email
          description: "User's email address."
        password:
          type: string
          format: password
          description: "User's password."
        username:
          type: string
          description: "Chosen username for the user."
        firstName:
          type: string
          description: "User's first name."
        lastName:
          type: string
          description: "User's last name."

    AuthenticationResponse:
      type: object
      description: "Response payload containing authentication token."
      properties:
        token:
          type: string
          description: "JWT authentication token."

    UserResponse:
      type: object
      description: "Response object containing user details."
      properties:
        userId:
          type: string
          description: "Unique identifier of the user."
        userFrn:
          type: string
          description: "FRN (Federated Resource Number) assigned to the user."
        email:
          type: string
          format: email
          description: "User's email address."
        username:
          type: string
          description: "User's login username."
        firstName:
          type: string
          description: "User's first name."
        lastName:
          type: string
          description: "User's last name."
        createdAt:
          type: string
          format: date-time
          description: "Timestamp indicating when the user account was created."
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp indicating when the user account was last updated."
        studyTime:
          type: integer
          description: "Total study time recorded for the user (in minutes)."
        gamesPlayed:
          type: integer
          description: "Total number of games played by the user."
        points:
          type: integer
          description: "Total points accumulated by the user."
        streak:
          type: integer
          description: "User's current game streak (consecutive days of activity)."

    ChangePasswordRequest:
      type: object
      description: "Request payload for changing the password."
      properties:
        oldPassword:
          type: string
          description: "Current password of the user."
        newPassword:
          type: string
          description: "New password for the user."

    NotificationSubscriber:
      type: object
      properties:
        userFrn:
          type: string
          description: "Unique identifier for the user."
        email:
          type: string
          description: "User's email address for receiving notifications."
        notificationTime:
          type: string
          format: time
          description: "Time when the user prefers to receive notifications."
        dailyNotifications:
          type: boolean
          description: "Indicates if the user is subscribed to daily notifications."
        notificationChannel:
          type: string
          enum: [ EMAIL ]
          description: "Notification delivery channel."

    DeckRequest:
      type: object
      description: "Request payload for creating a new deck."
      properties:
        name:
          type: string
          description: "Name of the deck."
        description:
          type: string
          description: "Brief description of the deck."

    DeckResponse:
      type: object
      description: "Response payload for a deck."
      properties:
        deckId:
          type: string
          description: "Id of the deck."
        deckFrn:
          type: string
          description: "FRN of the deck."
        name:
          type: string
          description: "Name of the deck."
        description:
          type: string
          description: "Brief description of the deck."
        createdAt:
          type: string
          format: date-time
          description: "Timestamp when the deck was created."
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp when the deck was last updated."

    QuestionRequest:
      type: object
      description: "Request payload for adding a question to a deck."
      properties:
        question:
          type: string
          description: "The text of the question."
        correctAnswers:
          type: array
          items:
            type: string
          description: "List of correct answers."
        incorrectAnswers:
          type: array
          items:
            type: string
          description: "List of incorrect answers."
        difficulty:
          type: string
          enum: [easy, medium, hard]
          description: "Difficulty level of the question."

    QuestionResponse:
      type: object
      description: "Response payload for a question."
      properties:
        questionId:
          type: string
          description: "Id of the question."
        questionFrn:
          type: string
          description: "FRN of the question."
        question:
          type: string
          description: "The text of the question."
        correctAnswers:
          type: array
          items:
            type: string
          description: "List of correct answers."
        incorrectAnswers:
          type: array
          items:
            type: string
          description: "List of incorrect answers."
        difficulty:
          type: string
          enum: [easy, medium, hard]
          description: "Difficulty level of the question."
        createdAt:
          type: string
          format: date-time
          description: "Timestamp when the question was created."
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp when the question was last updated."

    GameSessionResponse:
      type: object
      description: "Summary of a completed game session."
      properties:
        gameSessionId:
          type: string
          description: "Id of the game session."
        gameSessionFrn:
          type: string
          description: "FRN of the game session."
        score:
          type: integer
          description: "Final score achieved in the game session."
        correctAnswers:
          type: integer
          description: "Number of correctly answered questions."
        totalQuestions:
          type: integer
          description: "Total number of questions in the session."
        duration:
          type: string
          format: duration
          description: "Exact duration of the session in ISO 8601 format."
        accuracy:
          type: number
          format: float
          description: "Percentage of correct answers."
        startTime:
          type: string
          format: date-time
          description: "Timestamp when the session started."
        endTime:
          type: string
          format: date-time
          description: "Timestamp when the session ended."
        sessionDetails:
          type: array
          description: "Detailed breakdown of the user's performance."
          items:
            $ref: "#/components/schemas/GameSessionDetailsResponse"

    GameSessionDetailsResponse:
      type: object
      description: "Detailed breakdown of a user's performance on a specific question."
      properties:
        questionText:
          type: string
          description: "Text of the question."
        correctAnswers:
          type: array
          items:
            type: string
          description: "List of correct answers for this question."
        incorrectAnswers:
          type: array
          items:
            type: string
          description: "List of incorrect answers available in the question."
        userAnswers:
          type: array
          items:
            type: string
          description: "List of answers provided by the user."
        wasCorrect:
          type: boolean
          description: "Indicates whether the user answered correctly."

    FriendInvitationResponseReceived:
      type: object
      description: "Response payload for a received friend invitation."
      properties:
        invitationId:
          type: string
          description: "ID of the friend invitation."
        invitationFrn:
          type: string
          description: "FRN of the friend invitation."
        status:
          type: string
          description: "Current status of the invitation (e.g., PENDING, ACCEPTED, DECLINED)."
        createdAt:
          type: string
          format: date-time
          description: "Timestamp when the invitation was created."
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp when the invitation was last updated."
        sender:
          $ref: "#/components/schemas/UserSummary"

    FriendInvitationResponseSent:
      type: object
      description: "Response payload for a sent friend invitation."
      properties:
        invitationId:
          type: string
          description: "ID of the friend invitation."
        invitationFrn:
          type: string
          description: "FRN of the friend invitation."
        status:
          type: string
          description: "Current status of the invitation (e.g., PENDING, ACCEPTED, DECLINED)."
        createdAt:
          type: string
          format: date-time
          description: "Timestamp when the invitation was created."
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp when the invitation was last updated."
        recipient:
          $ref: "#/components/schemas/UserSummary"

    UserSummary:
      type: object
      description: "Summary details of a user (used in friend invitations)."
      properties:
        userId:
          type: string
          description: "ID of the user."
        userFrn:
          type: string
          description: "FRN of the user."
        username:
          type: string
          description: "User's username."
        firstName:
          type: string
          description: "First name of the user."
        lastName:
          type: string
          description: "Last name of the user."
        email:
          type: string
          format: email
          description: "Email of the user."

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          description: "HTTP status code of the error."
        error:
          type: string
          description: "Error message."
        cause:
          type: string
          description: "Cause of the error."
        action:
          type: string
          description: "Suggested action to resolve the error."
        timestamp:
          type: string
          format: date-time
          description: "Time when the error occurred."
        correlationId:
          type: string
          description: "Unique identifier for tracking the error."

  examples:
    LoginRequestExample:
      value:
        email: "user@example.com"
        password: "securePassword123"

    RegisterRequestExample:
      value:
        email: "newuser@example.com"
        password: "securePassword123"
        username: "johndoe"
        firstName: "John"
        lastName: "Doe"

    AuthenticationResponseExample:
      value:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UserResponseExample:
      value:
        userId: "HOGWNe0tCQurLlbT0CDQXi"
        userFrn: "frn:flashdash:user:HOGWNe0tCQurLlbT0CDQXi"
        email: "user@example.com"
        username: "flashgamer"
        firstName: "John"
        lastName: "Doe"
        createdAt: "2023-05-15T10:30:00Z"
        updatedAt: "2024-03-06T08:45:00Z"
        studyTime: 123
        gamesPlayed: 1092
        points: 4500
        streak: 7

    UserListResponseExample:
      value:
        - userId: "HOGWNe0tCQurLlbT0CDQXi"
          userFrn: "frn:flashdash:user:HOGWNe0tCQurLlbT0CDQXi"
          email: "user@example.com"
          username: "flashgamer"
          firstName: "John"
          lastName: "Doe"
          createdAt: "2023-05-15T10:30:00Z"
          updatedAt: "2024-03-06T08:45:00Z"
          studyTime: 123
          gamesPlayed: 1092
          points: 4500
          streak: 7
        - userId: "HOGWNe0tCQurLlbT0CDQXi"
          userFrn: "frn:flashdash:user:HOGWNe0tCQurLlbT0CDQXi"
          email: "user@example.com"
          username: "flashgamer"
          firstName: "John"
          lastName: "Doe"
          createdAt: "2023-05-15T10:30:00Z"
          updatedAt: "2024-03-06T08:45:00Z"
          studyTime: 123
          gamesPlayed: 1092
          points: 4500
          streak: 7

    ChangePasswordRequestExample:
      value:
        oldPassword: "OldSecurePass123!"
        newPassword: "NewStrongerPass456!"

    SubscriberResponseExample:
      value:
        userFrn: "user-12345"
        email: "user@example.com"
        notificationTime: "08:30:00"
        dailyNotifications: true
        notificationChannel: "EMAIL"

    DeckRequestExample:
      value:
        name: "Science Deck"
        description: "A deck containing science-related questions."

    DeckResponseExample:
      value:
        deckId: "ByCPCfpqTKjgaAADYZFHD1"
        deckFrn: "frn:flashdash:deck:ByCPCfpqTKjgaAADYZFHD1"
        name: "Science Deck"
        description: "A deck containing science-related questions."
        createdAt: "2024-03-03T12:00:00Z"
        updatedAt: "2024-03-03T12:30:00Z"

    DeckListResponseExample:
      value:
        - deckId: "ByCPCfpqTKjgaAADYZFHD1"
          deckFrn: "frn:flashdash:deck:ByCPCfpqTKjgaAADYZFHD1"
          name: "Science Deck"
          description: "A deck containing science-related questions."
          createdAt: "2024-03-03T12:00:00Z"
          updatedAt: "2024-03-03T12:30:00Z"
        - deckId: "HOGWNe0tCQurLlbT0CDQXi"
          deckFrn: "frn:flashdash:deck:HOGWNe0tCQurLlbT0CDQXi"
          name: "History Deck"
          description: "A deck containing history-related questions."
          createdAt: "2024-03-04T14:00:00Z"
          updatedAt: "2024-03-04T14:45:00Z"

    QuestionRequestExample:
      value:
        question: "What is the capital of France?"
        correctAnswers:
          - "Paris"
        incorrectAnswers:
          - "Berlin"
          - "Madrid"
          - "Rome"
        difficulty: "medium"

    QuestionListRequestExample:
      value:
        - question: "What is the capital of France?"
          correctAnswers:
            - "Paris"
          incorrectAnswers:
            - "Berlin"
            - "Madrid"
            - "Rome"
          difficulty: "medium"
        - question: "What is 2 + 2?"
          correctAnswers:
            - "4"
          incorrectAnswers:
            - "3"
            - "5"
            - "6"
          difficulty: "easy"

    QuestionResponseExample:
      value:
        questionId: "ByCPCfpqTKjgaAADYZFHD1"
        questionFrn: "frn:flashdash:question:ByCPCfpqTKjgaAADYZFHD1"
        question: "What is the capital of France?"
        correctAnswers:
          - "Paris"
        incorrectAnswers:
          - "Berlin"
          - "Madrid"
          - "Rome"
        difficulty: "medium"
        createdAt: "2024-03-03T12:00:00Z"
        updatedAt: "2024-03-03T12:30:00Z"

    QuestionListResponseExample:
      value:
        - questionId: "ByCPCfpqTKjgaAADYZFHD1"
          questionFrn: "frn:flashdash:question:ByCPCfpqTKjgaAADYZFHD1"
          question: "What is the capital of France?"
          correctAnswers:
            - "Paris"
          incorrectAnswers:
            - "Berlin"
            - "Madrid"
            - "Rome"
          difficulty: "medium"
          createdAt: "2024-03-03T12:00:00Z"
          updatedAt: "2024-03-03T12:30:00Z"
        - questionId: "HOGWNe0tCQurLlbT0CDQXi"
          questionFrn: "frn:flashdash:question:HOGWNe0tCQurLlbT0CDQXi"
          question: "What is 2 + 2?"
          correctAnswers:
            - "4"
          incorrectAnswers:
            - "3"
            - "5"
            - "6"
          difficulty: "easy"
          createdAt: "2024-03-04T14:00:00Z"
          updatedAt: "2024-03-04T14:45:00Z"

    GameSessionResponseExample:
      value:
        gameSessionId: "HOGWNe0tCQurLlbT0CDQXi"
        gameSessionFrn: "frn:flashdash:game-session:HOGWNe0tCQurLlbT0CDQXi"
        score: 85
        correctAnswers: 17
        totalQuestions: 20
        duration: "PT15M30S"
        accuracy: 85.0
        startTime: "2024-03-10T14:00:00Z"
        endTime: "2024-03-10T14:15:30Z"
        sessionDetails:
          - questionText: "What is the capital of France?"
            correctAnswers: ["Paris"]
            incorrectAnswers: ["London", "Berlin", "Madrid"]
            userAnswers: ["Paris"]
            wasCorrect: true
          - questionText: "Which planet is known as the Red Planet?"
            correctAnswers: ["Mars"]
            incorrectAnswers: ["Venus", "Jupiter", "Saturn"]
            userAnswers: ["Venus"]
            wasCorrect: false

    GameSessionResponseListExample:
      value:
        - gameSessionId: "HOGWNe0tCQurLlbT0CDQXi"
          gameSessionFrn: "frn:flashdash:game-session:HOGWNe0tCQurLlbT0CDQXi"
          score: 85
          correctAnswers: 17
          totalQuestions: 20
          duration: "PT15M30S"
          accuracy: 85.0
          startTime: "2024-03-10T14:00:00Z"
          endTime: "2024-03-10T14:15:30Z"
          sessionDetails:
            - questionText: "What is the capital of France?"
              correctAnswers: ["Paris"]
              incorrectAnswers: ["London", "Berlin", "Madrid"]
              userAnswers: ["Paris"]
              wasCorrect: true
        - gameSessionId: "ByCPCfpqTKjgaAADYZFHD1"
          gameSessionFrn: "frn:flashdash:game-session:ByCPCfpqTKjgaAADYZFHD1"
          score: 90
          correctAnswers: 18
          totalQuestions: 20
          duration: "PT10M45S"
          accuracy: 90.0
          startTime: "2024-03-11T14:00:00Z"
          endTime: "2024-03-11T14:10:45Z"
          sessionDetails:
            - questionText: "What is 5 + 7?"
              correctAnswers: ["12"]
              incorrectAnswers: ["10", "11", "13"]
              userAnswers: ["12"]
              wasCorrect: true

    FriendInvitationResponseReceivedExample:
      value:
        - invitationId: "EooNUUfHdRXpYY0m00SbaW"
          invitationFrn: "frn:flashdash:invitation:EooNUUfHdRXpYY0m00SbaW"
          status: "PENDING"
          createdAt: "2025-03-06T00:12:47.645226"
          updatedAt: "2025-03-06T01:00:00.123456"
          sender:
            userId: "ByCPCfpqTKjgaAADYZFHD1"
            userFrn: "frn:flashdash:user:ByCPCfpqTKjgaAADYZFHD1"
            firstName: "John"
            lastName: "Doe"
            email: "johndoe@example.com"

    FriendInvitationResponseSentExample:
      value:
        - invitationId: "EooNUUfHdRXpYY0m00SbaW"
          invitationFrn: "frn:flashdash:invitation:EooNUUfHdRXpYY0m00SbaW"
          status: "PENDING"
          createdAt: "2025-03-06T00:12:47.645226"
          updatedAt: "2025-03-06T01:00:00.123456"
          recipient:
            userId: "HOGWNe0tCQurLlbT0CDQXi"
            userFrn: "frn:flashdash:user:HOGWNe0tCQurLlbT0CDQXi"
            firstName: "Alice"
            lastName: "Smith"
            email: "alicesmith@example.com"

    ErrorResponseExample400_AccountAlreadyActivated:
      value:
        status: 400
        error: "E400001"
        cause: "Account is already activated"
        action: "The account has already been activated. No further action is required."
        timestamp: "2025-03-03T18:20:30.123456789"
        correlationId: "b2c3d4e5-f678-901a-bcde-23456789abcd"

    ErrorResponseExample401_TokenMissingOrInvalid:
      value:
        status: 401
        error: "E401001"
        cause: "Token is missing or invalid"
        action: "Provide a valid token to access this resource"
        timestamp: "2025-03-03T18:25:05.987654321"
        correlationId: "d9f8e7c6-b5a4-3210-abcdef123456"

    ErrorResponseExample401_InvalidPassword:
      value:
        status: 401
        error: "E401002"
        cause: "Invalid password provided"
        action: "Ensure you have entered the correct password and try again"
        timestamp: "2025-03-03T18:30:45.123456789"
        correlationId: "c5d4b3a2-f109-8765-4321-abcdef987654"

    ErrorResponseExample403_UnauthorizedInvitationResponse:
      value:
        status: 403
        error: "E403001"
        cause: "Unauthorized to respond to this invitation"
        action: "Ensure that you are the recipient of this invitation and try again"
        timestamp: "2025-03-03T18:35:20.678901234"
        correlationId: "e8d7c6b5-a432-1098-7654-3210abcdef12"

    ErrorResponseExample403_AccountNotActivated:
      value:
        status: 403
        error: "E403002"
        cause: "Account not activated"
        action: "Ensure that your account is activated. Please check your email for the activation link and try again."
        timestamp: "2025-03-03T18:40:15.234567890"
        correlationId: "f3e2d1c0-b987-6543-2109-abcdef543210"

    ErrorResponseExample403_CannotInviteYourself:
      value:
        status: 403
        error: "E403003"
        cause: "You cannot send an invitation to yourself."
        action: "Make sure you are not inviting yourself."
        timestamp: "2025-03-03T18:45:10.345678901"
        correlationId: "abc123efg456-hijk789-lmnop0123"

    ErrorResponseExample404_UserNotFound:
      value:
        status: 404
        error: "E404001"
        cause: "User not found with the provided email address"
        action: "Ensure that the email address is correct or register a new account"
        timestamp: "2025-03-03T18:50:05.567890123"
        correlationId: "123abc456def-789ghi012jkl-345mno678pq"

    ErrorResponseExample404_DeckNotFound:
      value:
        status: 404
        error: "E404002"
        cause: "Deck not found for the provided ID"
        action: "Verify the deck ID and ensure you have access to this deck"
        timestamp: "2025-03-03T18:55:30.678901234"
        correlationId: "pqrs123tuv456-wxyz789-abcd0123"

    ErrorResponseExample404_QuestionNotFound:
      value:
        status: 404
        error: "E404003"
        cause: "Question not found for the provided ID in the specified deck"
        action: "Verify the question ID and deck ID, and ensure you have access to the deck"
        timestamp: "2025-03-03T19:00:15.789012345"
        correlationId: "lmno456pqrs123-tuv789wxyz0123"

    ErrorResponseExample404_InvitationNotFound:
      value:
        status: 404
        error: "E404004"
        cause: "Invitation not found for the provided ID"
        action: "Verify the invitation ID and ensure that it exists before attempting this operation"
        timestamp: "2025-03-03T19:05:10.890123456"
        correlationId: "hijk789lmno0123-pqrs456tuv789"

    ErrorResponseExample404_FriendNotFound:
      value:
        status: 404
        error: "E404005"
        cause: "Friend not found with the provided email address"
        action: "Ensure that the email address is correct"
        timestamp: "2025-03-03T19:10:05.901234567"
        correlationId: "abcdef123456-ghijk789lmno0123"

    ErrorResponseExample409_EmailAlreadyRegistered:
      value:
        status: 409
        error: "E409001"
        cause: "The email address is already registered"
        action: "Use a different email address to register or try logging in"
        timestamp: "2025-03-03T19:15:45.012345678"
        correlationId: "mnop0123pqrs456tuv789wxyz0123"

    ErrorResponseExample409_FriendInvitationExists:
      value:
        status: 409
        error: "E409002"
        cause: "Friend invitation already exists between the specified users"
        action: "Check the existing invitation status or wait for the recipient's response before sending a new invitation"
        timestamp: "2025-03-03T19:20:30.123456789"
        correlationId: "wxyz0123abcd456efgh789ijkl0123"

    ErrorResponseExample409_AlreadyFriends:
      value:
        status: 409
        error: "E409003"
        cause: "You are already friends with this user"
        action: "You cannot send a friend invitation to someone who is already your friend."
        timestamp: "2025-03-03T19:25:15.234567890"
        correlationId: "abcd0123efgh456ijkl789mnop0123"
