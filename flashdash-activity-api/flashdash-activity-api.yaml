openapi: 3.0.3
info:
  title: FlashDash Activity Logging Service API
  description: |
    The FlashDash Activity Logging Service is responsible for tracking and logging various 
    user activities within the FlashDash ecosystem. These activities include account events, 
    gameplay sessions, deck and question interactions, and friend-related actions.

    This service enables analytics, auditing, and achievement tracking by providing structured 
    access to user actions across the platform.
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:7070
    description: Local development server for Activity Logging Service

tags:
  - name: Activities
    description: Endpoints for logging and retrieving user activities
  - name: Achievements
    description: Endpoint for retrieving user achievements
  - name: Leaderboards
    description: Endpoints for retrieving user rankings based on different criteria

paths:
  /activities:
    post:
      tags:
        - Activities
      summary: Log a new activity
      description: |
        Logs a new activity performed by a user, such as login, deck creation, or game completion.
      security:
        - bearerAuth: []
      operationId: logActivity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogActivityRequest"
            examples:
              Log Activity Request:
                $ref: "#/components/examples/LogActivityRequestExample"
      responses:
        "201":
          description: Activity successfully logged
        "400":
          description: Bad Request - Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Invalid Input:
                  $ref: "#/components/examples/ErrorResponseExample400_BadRequest"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

    get:
      tags:
        - Activities
      summary: Get all activities for the authenticated user
      description: |
        Retrieves a list of all activities performed by the authenticated user.
      security:
        - bearerAuth: []
      operationId: getUserActivities
      responses:
        "200":
          description: List of user activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityResponse"
              examples:
                User Activities:
                  $ref: "#/components/examples/ActivityListResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /activities/type/{activityType}:
    get:
      tags:
        - Activities
      summary: Get activities by type
      description: |
        Retrieves a list of activities filtered by type (e.g., only logins, only deck creations).
      security:
        - bearerAuth: []
      operationId: getActivitiesByType
      parameters:
        - name: activityType
          in: path
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_REGISTRATION
              - ACCOUNT_CONFIRMATION
              - ACCOUNT_LOGIN
              - ACCOUNT_UPDATED
              - ACCOUNT_DELETED
              - GAME_STARTED
              - GAME_FINISHED
              - DECK_CREATED
              - DECK_UPDATED
              - DECK_DELETED
              - QUESTION_CREATED
              - QUESTION_UPDATED
              - QUESTION_DELETED
              - FRIEND_INVITE_SENT
              - FRIEND_INVITE_RESPONDED
              - FRIEND_DELETED
              - ENABLE_DAILY_NOTIFICATIONS
              - DISABLE_DAILY_NOTIFICATIONS
      responses:
        "200":
          description: List of activities of the specified type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityResponse"
              examples:
                Activity List:
                  $ref: "#/components/examples/ActivityListResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /activities/statistics:
    get:
      tags:
        - Activities
      summary: Get user activity statistics
      description: |
        Retrieves various statistics related to the authenticated user's activities, such as:
        - Current streak (number of consecutive days of activity)
        - Total games played
        - Total decks created
        - Total questions created
        - Total friends added
      security:
        - bearerAuth: []
      operationId: getUserStatistics
      responses:
        "200":
          description: User activity statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityStatisticsResponse"
              examples:
                User statistics:
                  $ref: "#/components/examples/ActivityStatisticsExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /achievements:
    get:
      tags:
        - Achievements
      summary: Get achievements for the authenticated user
      description: |
        Retrieves all achievements unlocked by the authenticated user.
      security:
        - bearerAuth: []
      operationId: getUserAchievements
      responses:
        "200":
          description: List of user achievements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AchievementResponse"
              examples:
                User Achievements:
                  $ref: "#/components/examples/AchievementListExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /achievements/{achievementFrn}:
    get:
      tags:
        - Achievements
      summary: Get details of a specific achievement
      description: |
        Retrieves detailed information about a specific achievement using its unique FRN (Fully Qualified Resource Name).
      security:
        - bearerAuth: []
      operationId: getAchievementByFrn
      parameters:
        - name: achievementFrn
          in: path
          required: true
          schema:
            type: string
          description: "The unique FRN of the achievement."
      responses:
        "200":
          description: Achievement details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AchievementResponse"
              examples:
                Achievement Response Example:
                  $ref: "#/components/examples/AchievementResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Achievement not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Achievement Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_AchievementNotFoundExample"

  /achievements/schemas:
    get:
      tags:
        - Achievements
      summary: Get all achievement schemas
      description: |
        Retrieves a list of all available achievement schemas.
      security:
        - bearerAuth: [ ]
      operationId: getAllAchievementSchemas
      responses:
        "200":
          description: List of achievement schemas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AchievementSchemaResponse"
              examples:
                Achievement Schema List Example:
                  $ref: "#/components/examples/AchievementSchemaListExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /achievements/schemas/{schemaFrn}:
    get:
      tags:
        - Achievements
      summary: Get details of a specific achievement schema
      description: |
        Retrieves detailed information about a specific achievement schema using its unique FRN.
      security:
        - bearerAuth: [ ]
      operationId: getAchievementSchema
      parameters:
        - name: schemaFrn
          in: path
          required: true
          schema:
            type: string
          description: "The unique FRN of the achievement schema."
      responses:
        "200":
          description: Achievement schema details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AchievementSchemaResponse"
              examples:
                Achievement Schema Response Example:
                  $ref: "#/components/examples/AchievementSchemaResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: Achievement schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Achievement Schema Not Found:
                  $ref: "#/components/examples/ErrorResponseExample404_AchievementSchemaNotFoundExample"

  /leaderboards:
    get:
      tags:
        - Leaderboards
      summary: Get global or filtered user leaderboards
      description: |
        Retrieves a global or filtered leaderboard of users based on different ranking criteria. 
        If a list of included users (userFrn values) is provided, the ranking is limited to those users.
      security:
        - bearerAuth: []
      operationId: getLeaderboards
      parameters:
        - name: criteria
          in: query
          required: true
          schema:
            type: string
            enum:
              - currentStreak
              - totalGamesPlayed
              - totalDecksCreated
              - totalQuestionsCreated
              - totalFriendsAdded
          description: "The ranking criteria for sorting the leaderboard."
        - name: includedUsers
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: "A list of userFrn values representing users to be included in the ranking. If not provided, returns a global ranking."
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: "The number of top users to retrieve."
      responses:
        "200":
          description: List of top users based on the selected criteria (global or filtered)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LeaderboardEntry"
              examples:
                Leaderboard Response:
                  $ref: "#/components/examples/LeaderboardResponseExample"

        "400":
          description: Bad Request - Invalid criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Invalid Leaderboard Criteria:
                  $ref: "#/components/examples/ErrorResponseExample400_BadRequest"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Authentication scheme using Bearer token with JWT."

  schemas:
    ActivityResponse:
      type: object
      description: "Response payload for an activity log."
      properties:
        activityId:
          type: string
          description: "ID of the activity log."
        activityFrn:
          type: string
          description: "FRN of the activity log."
        userFrn:
          type: string
          description: "FRN of the user who performed the action."
        targetFrn:
          type: string
          description: "FRN of the target entity related to the activity."
        activityType:
          type: string
          description: "Type of activity."
        createdAt:
          type: string
          format: date-time
          description: "Timestamp when the activity was logged."
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp when the activity was last updated."

    ActivityStatisticsResponse:
      type: object
      description: "Statistics related to a user's activities."
      properties:
        currentStreak:
          type: integer
          description: "Number of consecutive days of activity."
        totalGamesPlayed:
          type: integer
          description: "Total number of games played."
        totalDecksCreated:
          type: integer
          description: "Total number of decks created."
        totalQuestionsCreated:
          type: integer
          description: "Total number of questions created."
        totalFriendsAdded:
          type: integer
          description: "Total number of friends added."

    AchievementResponse:
      type: object
      description: "Represents an achievement unlocked by a user."
      properties:
        achievementId:
          type: string
          description: "Unique ID of the achievement."
        achievementFrn:
          type: string
          description: "FRN identifier of the achievement."
        schemaId:
          type: string
          description: "Unique ID of the achievement."
        schemaFrn:
          type: string
          description: "FRN identifier of the achievement."
        name:
          type: string
          description: "Name of the achievement."
        description:
          type: string
          description: "Description of what the achievement represents."
        achievementType:
          type: string
          enum:
            - STREAK_ACHIEVEMENT
            - GAMES_PLAYED
            - DECKS_CREATED
            - QUESTIONS_CREATED
            - FRIENDS_ADDED
          description: "Type of the achievement."
        level:
          type: integer
          description: "The level of the achievement."
        threshold:
          type: integer
          description: "The required number of activities to reach this level."
        achievedAt:
          type: string
          format: date-time
          description: "The timestamp when the achievement was unlocked."

    AchievementSchemaResponse:
      type: object
      description: "Represents an achievement schema."
      properties:
        schemaId:
          type: string
          description: "Unique ID of the achievement."
        schemaFrn:
          type: string
          description: "FRN identifier of the achievement."
        name:
          type: string
          description: "Name of the achievement."
        description:
          type: string
          description: "Description of what the achievement represents."
        achievementType:
          type: string
          enum:
            - STREAK_ACHIEVEMENT
            - GAMES_PLAYED
            - DECKS_CREATED
            - QUESTIONS_CREATED
            - FRIENDS_ADDED
          description: "Type of the achievement."
        level:
          type: integer
          description: "The level of the achievement."
        threshold:
          type: integer
          description: "The required number of activities to reach this level."

    LogActivityRequest:
      type: object
      description: "Request payload for logging a new activity."
      properties:
        targetFrn:
          type: string
          description: "FRN of the target entity (e.g., deck, friend, game session)."
        activityType:
          type: string
          enum:
            - ACCOUNT_REGISTRATION
            - ACCOUNT_CONFIRMATION
            - ACCOUNT_LOGIN
            - ACCOUNT_UPDATED
            - ACCOUNT_DELETED
            - GAME_STARTED
            - GAME_FINISHED
            - DECK_CREATED
            - DECK_UPDATED
            - DECK_DELETED
            - QUESTION_CREATED
            - QUESTION_UPDATED
            - QUESTION_DELETED
            - FRIEND_INVITE_SENT
            - FRIEND_INVITE_RESPONDED
            - FRIEND_DELETED
            - ENABLE_DAILY_NOTIFICATIONS
            - DISABLE_DAILY_NOTIFICATIONS
          description: "Type of activity being logged."

    LeaderboardEntry:
      type: object
      description: "Represents a leaderboard entry for a user."
      properties:
        rank:
          type: integer
          description: "The rank position of the user in the leaderboard."
        userFrn:
          type: string
          description: "The unique identifier of the user."
        score:
          type: integer
          description: "The user's score based on the selected ranking criteria."

    ErrorResponse:
      type: object
      description: "Error response structure."
      properties:
        status:
          type: integer
          description: "HTTP status code of the error."
        error:
          type: string
          description: "Error message."
        cause:
          type: string
          description: "Cause of the error."
        action:
          type: string
          description: "Suggested action to resolve the error."
        timestamp:
          type: string
          format: date-time
          description: "Time when the error occurred."
        correlationId:
          type: string
          description: "Unique identifier for tracking the error."

  examples:
    ActivityListResponseExample:
      value:
        - activityId: "987654"
          activityFrn: "frn:flashdash:activity:987654"
          userFrn: "frn:flashdash:user:123456"
          targetFrn: "frn:flashdash:deck:654321"
          activityType: "DECK_CREATED"
          createdAt: "2025-03-06T10:00:00Z"
          updatedAt: "2025-03-06T12:00:00Z"

    ActivityStatisticsExample:
      value:
        currentStreak: 5
        totalGamesPlayed: 20
        totalDecksCreated: 4
        totalQuestionsCreated: 45
        totalFriendsAdded: 3

    AchievementResponseExample:
      value:
        achievementId: "d5e6f7g8"
        achievementFrn: "frn:flashdash:achievement:d5e6f7g8"
        schemaId: "d5e6f7g8123"
        schemaFrn: "frn:flashdash:achievement-schema:d5e6f7g8123"
        achievementType: "GAMES_PLAYED"
        name: "Deck Master"
        description: "Play a specified number of games."
        level: 2
        threshold: 50
        achievedAt: "2025-03-09T12:45:00"

    AchievementSchemaResponseExample:
      value:
        schemaId: "d5e6f7g8123"
        schemaFrn: "frn:flashdash:achievement-schema:d5e6f7g8123"
        achievementType: "GAMES_PLAYED"
        name: "Deck Master"
        description: "Play a specified number of games."
        level: 2
        threshold: 50

    AchievementListExample:
      value:
        - achievementId: "d5e6f7g8"
          achievementFrn: "frn:flashdash:achievement:d5e6f7g8"
          schemaId: "d5e6f7g8123"
          schemaFrn: "frn:flashdash:achievement-schema:d5e6f7g8123"
          achievementType: "GAMES_PLAYED"
          name: "Deck Master"
          description: "Play a specified number of games."
          level: 2
          threshold: 50
          achievedAt: "2025-03-09T12:45:00"

        - achievementId: "d5e6f7g8"
          achievementFrn: "frn:flashdash:achievement:d5e6f7g8"
          schemaId: "d5e6f7g8123"
          schemaFrn: "frn:flashdash:achievement-schema:d5e6f7g8123"
          achievementType: "GAMES_PLAYED"
          name: "Deck Master"
          description: "Play a specified number of games."
          level: 2
          threshold: 50
          achievedAt: "2025-03-09T12:45:00"

    AchievementSchemaListExample:
      value:
        - schemaId: "d5e6f7g8123"
          schemaFrn: "frn:flashdash:achievement-schema:d5e6f7g8123"
          achievementType: "GAMES_PLAYED"
          name: "Deck Master"
          description: "Play a specified number of games."
          level: 2
          threshold: 50

        - schemaId: "d5e6f7g8123"
          schemaFrn: "frn:flashdash:achievement-schema:d5e6f7g8123"
          achievementType: "GAMES_PLAYED"
          name: "Deck Master"
          description: "Play a specified number of games."
          level: 2
          threshold: 50

    LogActivityRequestExample:
      value:
        targetFrn: "frn:flashdash:deck:654321"
        activityType: "DECK_CREATED"

    LeaderboardResponseExample:
      value:
        - rank: 1
          userFrn: "frn:flashdash:user:111111"
          score: 25
        - rank: 2
          userFrn: "frn:flashdash:user:222222"
          score: 20
        - rank: 3
          userFrn: "frn:flashdash:user:333333"
          score: 15

    ErrorResponseExample400_BadRequest:
      value:
        status: 400
        error: "E400001"
        cause: "Invalid request data"
        action: "Ensure that all required fields are provided"
        timestamp: "2025-03-06T12:00:00Z"
        correlationId: "a1b2c3d4"

    ErrorResponseExample401_TokenMissingOrInvalid:
      value:
        status: 401
        error: "E401001"
        cause: "Token is missing or invalid"
        action: "Provide a valid authentication token"
        timestamp: "2025-03-06T12:10:00Z"
        correlationId: "d4e5f6g7"

    ErrorResponseExample404_AchievementNotFoundExample:
      value:
        status: 404
        error: "E404001"
        cause: "Achievement not found"
        action: "Ensure the provided achievement FRN is correct"
        timestamp: "2025-03-10T16:00:00Z"
        correlationId: "x9y8z7w6"

    ErrorResponseExample404_AchievementSchemaNotFoundExample:
      value:
        status: 404
        error: "E404001"
        cause: "Achievement schema not found"
        action: "Ensure the provided achievement schema FRN is correct"
        timestamp: "2025-03-10T16:00:00Z"
        correlationId: "x9y8z7w6"
