openapi: 3.0.3
info:
  title: FlashDash Notification Service API
  description: |
    The FlashDash Notification Service API manages the sending of email notifications 
    and in-app notifications for users. The service handles email confirmations, 
    friend invitations, and daily reminder notifications.
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:9090
    description: Local development server for Notification Service

tags:
  - name: Subscribers
    description: Endpoints for managing user subscription to notifications.
  - name: Notifications
    description: Endpoints for sending email notifications to users.

paths:
  /subscribers:
    post:
      tags:
        - Subscribers
      summary: Register the authenticated user for notifications
      description: |
        Registers the user in the notification service based on authentication token.
        The user will start receiving daily notifications by default.
      security:
        - bearerAuth: []
      operationId: registerSubscriber
      responses:
        "201":
          description: User successfully registered.
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "409":
          description: User already registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                User Already Registered:
                  $ref: "#/components/examples/ErrorResponseExample409_UserAlreadyRegistered"

    get:
      tags:
        - Subscribers
      summary: Retrieve the authenticated user's subscription details
      description: |
        Fetches the subscription details of the authenticated user.
      security:
        - bearerAuth: []
      operationId: getSubscriber
      responses:
        "200":
          description: Subscription details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSubscriber"
              examples:
                Subscriber response:
                  $ref: "#/components/examples/SubscriberResponseExample"
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: User is not subscribed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                User Not Subscribed:
                  $ref: "#/components/examples/ErrorResponseExample404_UserNotFound"

    delete:
      tags:
        - Subscribers
      summary: Unregister the authenticated user
      description: |
        Deletes the user's subscription from the notification service.
      security:
        - bearerAuth: []
      operationId: unregisterSubscriber
      responses:
        "204":
          description: User successfully unregistered.
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"
        "404":
          description: User is not subscribed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                User Not Subscribed:
                  $ref: "#/components/examples/ErrorResponseExample404_UserNotFound"

  /notifications/confirm-account:
    post:
      tags:
        - Notifications
      summary: Send account confirmation email
      description: |
        Sends an email to the user with a confirmation link for activating their account.
      security:
        - bearerAuth: []
      operationId: sendAccountConfirmationEmail
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: "Account confirmation token to be included in the verification link."
      responses:
        "202":
          description: Confirmation email sent
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /notifications/friend-invite:
    post:
      tags:
        - Notifications
      summary: Send friend invitation email
      description: |
        Sends an email notification to a user when they receive a friend invitation.
      security:
        - bearerAuth: []
      operationId: sendFriendInviteEmail
      responses:
        "202":
          description: Friend invitation email sent
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /notifications/daily/enable:
    post:
      tags:
        - Notifications
      summary: Enable daily notifications
      description: |
        Enables daily notifications for the authenticated user.
        The service will send daily reminders at a fixed time.
      security:
        - bearerAuth: []
      operationId: enableDailyNotifications
      parameters:
        - name: notificationTime
          in: query
          required: false
          schema:
            type: string
            format: time
          description: "Optional time for daily notifications (HH:mm format). If not provided, the default time will be used."
      responses:
        "200":
          description: Daily notifications enabled successfully
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

  /notifications/daily/disable:
    post:
      tags:
        - Notifications
      summary: Disable daily notifications
      description: |
        Disables daily notifications for the authenticated user.
      security:
        - bearerAuth: []
      operationId: disableDailyNotifications
      responses:
        "200":
          description: Daily notifications disabled successfully
        "401":
          description: Unauthorized - Token Missing or Invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Token Missing or Invalid:
                  $ref: "#/components/examples/ErrorResponseExample401_TokenMissingOrInvalid"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Authentication scheme using Bearer token with JWT."

  schemas:
    NotificationSubscriber:
      type: object
      properties:
        userFrn:
          type: string
          description: "Unique identifier for the user."
        email:
          type: string
          description: "User's email address for receiving notifications."
        notificationTime:
          type: string
          format: time
          description: "Time when the user prefers to receive notifications."
        dailyNotifications:
          type: boolean
          description: "Indicates if the user is subscribed to daily notifications."
        notificationChannel:
          type: string
          enum: [EMAIL]
          description: "Notification delivery channel."

    ErrorResponse:
      type: object
      description: "Error response structure."
      properties:
        status:
          type: integer
          description: "HTTP status code of the error."
        error:
          type: string
          description: "Error message."
        cause:
          type: string
          description: "Cause of the error."
        action:
          type: string
          description: "Suggested action to resolve the error."
        timestamp:
          type: string
          format: date-time
          description: "Time when the error occurred."
        correlationId:
          type: string
          description: "Unique identifier for tracking the error."

  examples:
    SubscriberResponseExample:
      value:
        userFrn: "user-12345"
        email: "user@example.com"
        notificationTime: "08:30:00"
        dailyNotifications: true
        notificationChannel: "EMAIL"

    ErrorResponseExample401_TokenMissingOrInvalid:
      value:
        status: 401
        error: "E401001"
        cause: "Token is missing or invalid"
        action: "Provide a valid authentication token"
        timestamp: "2025-03-06T12:10:00Z"
        correlationId: "d4e5f6g7"

    ErrorResponseExample404_UserNotFound:
      value:
        status: 404
        error: "E404001"
        message: "User not found."
        action: "Register the user for notifications."
        timestamp: "2025-03-16T12:00:00Z"
        correlationId: "xyz789"

    ErrorResponseExample409_UserAlreadyRegistered:
      value:
        status: 409
        error: "E409001"
        message: "User already registered."
        action: "No further action required."
        timestamp: "2025-03-16T12:00:00Z"
        correlationId: "abc123"
